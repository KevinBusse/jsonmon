// Code generated by go-bindata.
// sources:
// ui/app.js
// ui/index.html
// ui/main.css
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appJs = "\x27\x75\x73\x65\x20\x73\x74\x72\x69\x63\x74\x27\x3b\x0a\x0a\x76\x61\x72\x20\x41\x70\x70\x20\x20\x20\x3d\x20\x61\x6e\x67\x75\x6c\x61\x72\x2e\x6d\x6f\x64\x75\x6c\x65\x28\x27\x6a\x73\x6f\x6e\x6d\x6f\x6e\x27\x2c\x20\x5b\x5d\x29\x2c\x0a\x20\x20\x20\x20\x54\x69\x74\x6c\x65\x20\x3d\x20\x27\x53\x79\x73\x74\x65\x6d\x73\x20\x73\x74\x61\x74\x75\x73\x27\x3b\x0a\x0a\x41\x70\x70\x2e\x63\x6f\x6e\x66\x69\x67\x28\x5b\x27\x24\x63\x6f\x6d\x70\x69\x6c\x65\x50\x72\x6f\x76\x69\x64\x65\x72\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x24\x63\x6f\x6d\x70\x69\x6c\x65\x50\x72\x6f\x76\x69\x64\x65\x72\x29\x20\x7b\x0a\x20\x20\x24\x63\x6f\x6d\x70\x69\x6c\x65\x50\x72\x6f\x76\x69\x64\x65\x72\x2e\x64\x65\x62\x75\x67\x49\x6e\x66\x6f\x45\x6e\x61\x62\x6c\x65\x64\x28\x66\x61\x6c\x73\x65\x29\x3b\x0a\x7d\x5d\x29\x3b\x0a\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x65\x74\x4a\x73\x6f\x6e\x28\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2c\x20\x24\x73\x63\x6f\x70\x65\x2c\x20\x24\x68\x74\x74\x70\x29\x20\x7b\x0a\x20\x20\x24\x68\x74\x74\x70\x2e\x67\x65\x74\x28\x27\x2f\x73\x74\x61\x74\x75\x73\x27\x29\x0a\x20\x20\x20\x20\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x65\x73\x29\x7b\x0a\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x24\x73\x63\x6f\x70\x65\x2e\x6a\x73\x6f\x6e\x20\x21\x3d\x3d\x20\x72\x65\x73\x2e\x64\x61\x74\x61\x29\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x24\x73\x63\x6f\x70\x65\x2e\x6a\x73\x6f\x6e\x20\x3d\x20\x72\x65\x73\x2e\x64\x61\x74\x61\x3b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x2f\x2f\x20\x50\x61\x67\x65\x20\x74\x69\x74\x6c\x65\x20\x73\x68\x6f\x75\x6c\x64\x20\x69\x6e\x63\x6c\x75\x64\x65\x20\x65\x72\x72\x6f\x72\x73\x20\x6e\x75\x6d\x62\x65\x72\x2e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x65\x72\x72\x6f\x72\x73\x20\x3d\x20\x72\x65\x73\x2e\x64\x61\x74\x61\x2e\x66\x69\x6c\x74\x65\x72\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x63\x68\x65\x63\x6b\x29\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x63\x68\x65\x63\x6b\x2e\x66\x61\x69\x6c\x65\x64\x3b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x7d\x29\x3b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x65\x72\x72\x6f\x72\x73\x2e\x6c\x65\x6e\x67\x74\x68\x29\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2e\x74\x69\x74\x6c\x65\x20\x3d\x20\x27\x28\x27\x20\x2b\x20\x65\x72\x72\x6f\x72\x73\x2e\x6c\x65\x6e\x67\x74\x68\x20\x2b\x20\x27\x29\x20\x27\x20\x2b\x20\x54\x69\x74\x6c\x65\x3b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2e\x74\x69\x74\x6c\x65\x20\x3d\x20\x54\x69\x74\x6c\x65\x3b\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x7d\x0a\x20\x20\x20\x20\x20\x20\x7d\x0a\x20\x20\x20\x20\x7d\x29\x3b\x0a\x7d\x0a\x0a\x41\x70\x70\x2e\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x28\x27\x72\x65\x6c\x6f\x61\x64\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2c\x20\x24\x73\x63\x6f\x70\x65\x2c\x20\x24\x68\x74\x74\x70\x29\x20\x7b\x0a\x20\x20\x67\x65\x74\x4a\x73\x6f\x6e\x28\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2c\x20\x24\x73\x63\x6f\x70\x65\x2c\x20\x24\x68\x74\x74\x70\x29\x3b\x0a\x20\x20\x73\x65\x74\x49\x6e\x74\x65\x72\x76\x61\x6c\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x0a\x20\x20\x20\x20\x67\x65\x74\x4a\x73\x6f\x6e\x28\x24\x72\x6f\x6f\x74\x53\x63\x6f\x70\x65\x2c\x20\x24\x73\x63\x6f\x70\x65\x2c\x20\x24\x68\x74\x74\x70\x29\x3b\x0a\x20\x20\x7d\x2c\x20\x35\x20\x2a\x20\x31\x30\x30\x30\x29\x3b\x0a\x7d\x29\x3b\x0a"

func appJsBytes() ([]byte, error) {
	return bindataRead(
		_appJs,
		"app.js",
	)
}

func appJs() (*asset, error) {
	bytes, err := appJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = "\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x68\x74\x6d\x6c\x3e\x0a\x3c\x68\x74\x6d\x6c\x20\x6e\x67\x2d\x61\x70\x70\x3d\x22\x6a\x73\x6f\x6e\x6d\x6f\x6e\x22\x3e\x0a\x20\x20\x3c\x68\x65\x61\x64\x3e\x0a\x20\x20\x20\x20\x3c\x6d\x65\x74\x61\x20\x63\x68\x61\x72\x73\x65\x74\x3d\x22\x75\x74\x66\x2d\x38\x22\x3e\x0a\x20\x20\x20\x20\x3c\x74\x69\x74\x6c\x65\x20\x6e\x67\x2d\x62\x69\x6e\x64\x3d\x22\x74\x69\x74\x6c\x65\x22\x3e\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0a\x20\x20\x20\x20\x3c\x6c\x69\x6e\x6b\x20\x72\x65\x6c\x3d\x22\x73\x74\x79\x6c\x65\x73\x68\x65\x65\x74\x22\x20\x74\x79\x70\x65\x3d\x22\x74\x65\x78\x74\x2f\x63\x73\x73\x22\x20\x68\x72\x65\x66\x3d\x22\x6d\x61\x69\x6e\x2e\x63\x73\x73\x22\x3e\x0a\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x74\x79\x70\x65\x3d\x22\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x22\x20\x73\x72\x63\x3d\x22\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x6a\x61\x78\x2e\x67\x6f\x6f\x67\x6c\x65\x61\x70\x69\x73\x2e\x63\x6f\x6d\x2f\x61\x6a\x61\x78\x2f\x6c\x69\x62\x73\x2f\x61\x6e\x67\x75\x6c\x61\x72\x6a\x73\x2f\x31\x2e\x35\x2e\x37\x2f\x61\x6e\x67\x75\x6c\x61\x72\x2e\x6d\x69\x6e\x2e\x6a\x73\x22\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0a\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x74\x79\x70\x65\x3d\x22\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x22\x20\x73\x72\x63\x3d\x22\x61\x70\x70\x2e\x6a\x73\x22\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x0a\x20\x20\x3c\x2f\x68\x65\x61\x64\x3e\x0a\x20\x20\x3c\x62\x6f\x64\x79\x20\x6e\x67\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x3d\x22\x72\x65\x6c\x6f\x61\x64\x22\x3e\x0a\x20\x20\x20\x20\x3c\x74\x61\x62\x6c\x65\x3e\x0a\x20\x20\x20\x20\x20\x20\x3c\x74\x72\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x74\x68\x3e\x43\x68\x65\x63\x6b\x3c\x2f\x74\x68\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x74\x68\x3e\x53\x74\x61\x74\x75\x73\x3c\x2f\x74\x68\x3e\x0a\x20\x20\x20\x20\x20\x20\x3c\x2f\x74\x72\x3e\x0a\x20\x20\x20\x20\x20\x20\x3c\x74\x72\x20\x6e\x67\x2d\x72\x65\x70\x65\x61\x74\x3d\x22\x63\x68\x65\x63\x6b\x20\x69\x6e\x20\x6a\x73\x6f\x6e\x22\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x74\x64\x3e\x3c\x61\x20\x6e\x67\x2d\x69\x66\x3d\x22\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x22\x20\x68\x72\x65\x66\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x7d\x7d\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x7d\x7d\x22\x3e\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x7d\x7d\x3c\x2f\x61\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x6e\x67\x2d\x69\x66\x3d\x22\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x20\x3d\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x22\x20\x68\x72\x65\x66\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x7d\x7d\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x7d\x7d\x22\x3e\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x77\x65\x62\x7d\x7d\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x6e\x67\x2d\x69\x66\x3d\x22\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x63\x68\x65\x63\x6b\x2e\x73\x68\x65\x6c\x6c\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x73\x68\x65\x6c\x6c\x7d\x7d\x22\x3e\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x7d\x7d\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x6e\x67\x2d\x69\x66\x3d\x22\x63\x68\x65\x63\x6b\x2e\x6e\x61\x6d\x65\x20\x3d\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x63\x68\x65\x63\x6b\x2e\x73\x68\x65\x6c\x6c\x20\x21\x3d\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x73\x68\x65\x6c\x6c\x7d\x7d\x22\x3e\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x73\x68\x65\x6c\x6c\x7d\x7d\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x2f\x74\x64\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x74\x64\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x6e\x67\x2d\x73\x77\x69\x74\x63\x68\x20\x6f\x6e\x3d\x22\x63\x68\x65\x63\x6b\x2e\x66\x61\x69\x6c\x65\x64\x22\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x6f\x6b\x22\x20\x6e\x67\x2d\x73\x77\x69\x74\x63\x68\x2d\x77\x68\x65\x6e\x3d\x22\x66\x61\x6c\x73\x65\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x73\x69\x6e\x63\x65\x7d\x7d\x22\x3e\x6f\x6b\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x66\x61\x69\x6c\x22\x20\x6e\x67\x2d\x73\x77\x69\x74\x63\x68\x2d\x77\x68\x65\x6e\x3d\x22\x74\x72\x75\x65\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x7b\x7b\x63\x68\x65\x63\x6b\x2e\x73\x69\x6e\x63\x65\x7d\x7d\x22\x3e\x66\x61\x69\x6c\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x2f\x64\x69\x76\x3e\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x2f\x74\x64\x3e\x0a\x20\x20\x20\x20\x20\x20\x3c\x2f\x74\x72\x3e\x0a\x20\x20\x20\x20\x3c\x2f\x74\x61\x62\x6c\x65\x3e\x0a\x20\x20\x3c\x2f\x62\x6f\x64\x79\x3e\x0a\x3c\x2f\x68\x74\x6d\x6c\x3e"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = "\x61\x3a\x6c\x69\x6e\x6b\x20\x7b\x0a\x20\x20\x74\x65\x78\x74\x2d\x64\x65\x63\x6f\x72\x61\x74\x69\x6f\x6e\x3a\x20\x6e\x6f\x6e\x65\x3b\x0a\x7d\x0a\x61\x3a\x68\x6f\x76\x65\x72\x20\x7b\x0a\x20\x20\x74\x65\x78\x74\x2d\x64\x65\x63\x6f\x72\x61\x74\x69\x6f\x6e\x3a\x20\x75\x6e\x64\x65\x72\x6c\x69\x6e\x65\x3b\x0a\x7d\x0a\x74\x68\x20\x7b\x0a\x20\x20\x70\x61\x64\x64\x69\x6e\x67\x3a\x20\x30\x2e\x33\x65\x6d\x20\x30\x20\x30\x2e\x36\x65\x6d\x20\x31\x65\x6d\x3b\x0a\x20\x20\x63\x6f\x6c\x6f\x72\x3a\x20\x67\x72\x61\x79\x3b\x0a\x7d\x0a\x74\x64\x20\x7b\x0a\x20\x20\x70\x61\x64\x64\x69\x6e\x67\x3a\x20\x30\x2e\x32\x65\x6d\x20\x30\x20\x30\x2e\x32\x65\x6d\x20\x31\x65\x6d\x3b\x0a\x7d\x0a\x2e\x6f\x6b\x20\x7b\x0a\x20\x20\x63\x6f\x6c\x6f\x72\x3a\x20\x67\x72\x65\x65\x6e\x3b\x0a\x7d\x0a\x2e\x66\x61\x69\x6c\x20\x7b\x0a\x20\x20\x63\x6f\x6c\x6f\x72\x3a\x20\x72\x65\x64\x3b\x0a\x7d\x0a"

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.js": appJs,
	"index.html": indexHtml,
	"main.css": mainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.js": &bintree{appJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"main.css": &bintree{mainCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

